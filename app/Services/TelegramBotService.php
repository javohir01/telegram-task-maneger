<?php

namespace App\Services;

use App\Models\TelegramGroup;
use App\Models\TelegramUser;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;

class TelegramBotService
{
    protected string $apiUrl;
    protected string $token;

    public function __construct()
    {
        $this->token = config('services.telegram.bot_token');
        $this->apiUrl = "https://api.telegram.org/bot{$this->token}";
    }

    /**
     * Send a message to a chat.
     *
     * @param int|string $chatId
     * @param string $text
     * @param array $options
     * @return array|null
     */
    public function sendMessage($chatId, string $text, array $options = []): ?array
    {
        $params = array_merge([
            'chat_id' => $chatId,
            'text' => $text,
            'parse_mode' => 'HTML',
        ], $options);

        try {
            $response = Http::post("{$this->apiUrl}/sendMessage", $params);
            return $response->json();
        } catch (\Exception $e) {
            Log::error('Failed to send Telegram message', [
                'error' => $e->getMessage(),
                'chat_id' => $chatId,
                'text' => $text,
            ]);
            return null;
        }
    }

    /**
     * Send a message with inline keyboard.
     *
     * @param int|string $chatId
     * @param string $text
     * @param array $keyboard
     * @return array|null
     */
    public function sendInlineKeyboard($chatId, string $text, array $keyboard): ?array
    {
        return $this->sendMessage($chatId, $text, [
            'reply_markup' => json_encode([
                'inline_keyboard' => $keyboard
            ])
        ]);
    }

    /**
     * Process an update from Telegram.
     *
     * @param array $update
     * @return void
     */
    public function processUpdate(array $update): void
    {
        if (isset($update['message'])) {
            $this->processMessage($update['message']);
        } elseif (isset($update['callback_query'])) {
            $this->processCallbackQuery($update['callback_query']);
        }
    }

    /**
     * Process a message from Telegram.
     *
     * @param array $message
     * @return void
     */
    protected function processMessage(array $message): void
    {
        $chatId = $message['chat']['id'];
        $text = $message['text'] ?? '';
        $user = $message['from'];

        // Save or update user
        $telegramUser = $this->saveUser($user);

        // Check if this is a group chat
        if (in_array($message['chat']['type'], ['group', 'supergroup'])) {
            $this->saveGroup($message['chat'], $telegramUser);
        }

        // Process commands
        if (str_starts_with($text, '/')) {
            $this->processCommand($text, $chatId, $telegramUser);
        }
    }

    /**
     * Process a callback query from Telegram.
     *
     * @param array $callbackQuery
     * @return void
     */
    protected function processCallbackQuery(array $callbackQuery): void
    {
        $data = $callbackQuery['data'];
        $chatId = $callbackQuery['message']['chat']['id'];
        $user = $callbackQuery['from'];
        $messageId = $callbackQuery['message']['message_id'];

        // Save or update user
        $telegramUser = $this->saveUser($user);

        // Process callback data
        $parts = explode(':', $data);
        $action = $parts[0] ?? '';

        switch ($action) {
            case 'task_list':
                $this->sendTaskList($chatId, $telegramUser);
                break;
            case 'task_create':
                $this->startTaskCreation($chatId, $telegramUser);
                break;
            case 'task_view':
                $taskId = $parts[1] ?? null;
                if ($taskId) {
                    $this->viewTask($chatId, $telegramUser, $taskId);
                }
                break;
            case 'task_edit':
                $taskId = $parts[1] ?? null;
                if ($taskId) {
                    $this->editTask($chatId, $telegramUser, $taskId);
                }
                break;
            case 'task_delete':
                $taskId = $parts[1] ?? null;
                if ($taskId) {
                    $this->deleteTask($chatId, $telegramUser, $taskId);
                }
                break;
            case 'task_status':
                $taskId = $parts[1] ?? null;
                $status = $parts[2] ?? null;
                if ($taskId && $status) {
                    $this->updateTaskStatus($chatId, $telegramUser, $taskId, $status);
                }
                break;
        }

        // Answer callback query to remove loading state
        Http::post("{$this->apiUrl}/answerCallbackQuery", [
            'callback_query_id' => $callbackQuery['id'],
        ]);
    }

    /**
     * Process a command from Telegram.
     *
     * @param string $text
     * @param int|string $chatId
     * @param TelegramUser $user
     * @return void
     */
    protected function processCommand(string $text, $chatId, TelegramUser $user): void
    {
        $command = strtolower(explode(' ', $text)[0]);

        switch ($command) {
            case '/start':
                $this->handleStartCommand($chatId, $user);
                break;
            case '/help':
                $this->handleHelpCommand($chatId);
                break;
            case '/tasks':
                $this->sendTaskList($chatId, $user);
                break;
            case '/create':
                $this->startTaskCreation($chatId, $user);
                break;
            default:
                $this->sendMessage($chatId, "–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /help –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥.");
                break;
        }
    }

    /**
     * Handle the /start command.
     *
     * @param int|string $chatId
     * @param TelegramUser $user
     * @return void
     */
    protected function handleStartCommand($chatId, TelegramUser $user): void
    {
        $name = $user->first_name ?: '–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á';
        $message = "–ü—Ä–∏–≤—ñ—Ç, {$name}! üëã\n\n";
        $message .= "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ Task Manager –±–æ—Ç–∞. –¶–µ–π –±–æ—Ç –¥–æ–ø–æ–º–æ–∂–µ –≤–∞–º –∫–µ—Ä—É–≤–∞—Ç–∏ –≤–∞—à–∏–º–∏ –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏.\n\n";
        $message .= "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /help –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥.";

        $keyboard = [
            [
                ['text' => 'üìã –ú–æ—ó –∑–∞–≤–¥–∞–Ω–Ω—è', 'callback_data' => 'task_list'],
                ['text' => '‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è', 'callback_data' => 'task_create']
            ],
            [
                ['text' => '‚ùì –î–æ–ø–æ–º–æ–≥–∞', 'callback_data' => 'help']
            ]
        ];

        $this->sendInlineKeyboard($chatId, $message, $keyboard);
    }

    /**
     * Handle the /help command.
     *
     * @param int|string $chatId
     * @return void
     */
    protected function handleHelpCommand($chatId): void
    {
        $message = "<b>–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:</b>\n\n";
        $message .= "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.\n";
        $message .= "/help - –í–∏–≤—ñ–¥ –¥–æ–≤—ñ–¥–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞.\n";
        $message .= "/tasks - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–≤–¥–∞–Ω—å.\n";
        $message .= "/create - –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è.\n";

        $this->sendMessage($chatId, $message);
    }

    /**
     * Send the task list to the user.
     *
     * @param int|string $chatId
     * @param TelegramUser $user
     * @return void
     */
    protected function sendTaskList($chatId, TelegramUser $user): void
    {
        $tasks = $user->tasks()->orderBy('created_at', 'desc')->get();

        if ($tasks->isEmpty()) {
            $message = "–£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –∑–∞–≤–¥–∞–Ω—å. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /create —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è.";
            $keyboard = [
                [
                    ['text' => '‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è', 'callback_data' => 'task_create']
                ]
            ];
            $this->sendInlineKeyboard($chatId, $message, $keyboard);
            return;
        }

        $message = "<b>–í–∞—à—ñ –∑–∞–≤–¥–∞–Ω–Ω—è:</b>\n\n";
        
        foreach ($tasks as $index => $task) {
            $statusEmoji = $this->getStatusEmoji($task->status);
            $priorityEmoji = $this->getPriorityEmoji($task->priority);
            
            $message .= "{$index + 1}. {$statusEmoji} {$priorityEmoji} <b>{$task->title}</b>\n";
            
            if ($task->due_date) {
                $message .= "üìÖ –î–æ: " . $task->due_date->format('d.m.Y H:i') . "\n";
            }
            
            $message .= "\n";
        }

        $keyboard = [];
        foreach ($tasks as $task) {
            $keyboard[] = [
                ['text' => "üëÅÔ∏è {$task->title}", 'callback_data' => "task_view:{$task->id}"]
            ];
        }
        
        $keyboard[] = [
            ['text' => '‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è', 'callback_data' => 'task_create']
        ];

        $this->sendInlineKeyboard($chatId, $message, $keyboard);
    }

    /**
     * Start the task creation process.
     *
     * @param int|string $chatId
     * @param TelegramUser $user
     * @return void
     */
    protected function startTaskCreation($chatId, TelegramUser $user): void
    {
        // This would typically involve a conversation flow
        // For simplicity, we'll just send instructions
        $message = "–©–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è, –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n\n";
        $message .= "<code>/create –ù–∞–∑–≤–∞ –∑–∞–≤–¥–∞–Ω–Ω—è | –û–ø–∏—Å –∑–∞–≤–¥–∞–Ω–Ω—è | –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç | –î–∞—Ç–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è</code>\n\n";
        $message .= "–ù–∞–ø—Ä–∏–∫–ª–∞–¥:\n";
        $message .= "<code>/create –ö—É–ø–∏—Ç–∏ –º–æ–ª–æ–∫–æ | –ö—É–ø–∏—Ç–∏ 2 –ª—ñ—Ç—Ä–∏ –º–æ–ª–æ–∫–∞ –≤ –º–∞–≥–∞–∑–∏–Ω—ñ | high | 2023-06-15</code>\n\n";
        $message .= "–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –º–æ–∂–µ –±—É—Ç–∏: low, medium, high, urgent\n";
        $message .= "–î–∞—Ç–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ YYYY-MM-DD";

        $this->sendMessage($chatId, $message);
    }

    /**
     * View a task.
     *
     * @param int|string $chatId
     * @param TelegramUser $user
     * @param int $taskId
     * @return void
     */
    protected function viewTask($chatId, TelegramUser $user, $taskId): void
    {
        $task = $user->tasks()->find($taskId);

        if (!$task) {
            $this->sendMessage($chatId, "–ó–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ —É –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –Ω—å–æ–≥–æ.");
            return;
        }

        $statusEmoji = $this->getStatusEmoji($task->status);
        $priorityEmoji = $this->getPriorityEmoji($task->priority);
        
        $message = "<b>{$task->title}</b>\n\n";
        $message .= "–°—Ç–∞—Ç—É—Å: {$statusEmoji} " . ucfirst($task->status) . "\n";
        $message .= "–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: {$priorityEmoji} " . ucfirst($task->priority) . "\n";
        
        if ($task->due_date) {
            $message .= "–¢–µ—Ä–º—ñ–Ω –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: üìÖ " . $task->due_date->format('d.m.Y H:i') . "\n";
        }
        
        if ($task->description) {
            $message .= "\n–û–ø–∏—Å:\n{$task->description}\n";
        }
        
        $files = $task->files;
        if ($files->count() > 0) {
            $message .= "\n–ü—Ä–∏–∫—Ä—ñ–ø–ª–µ–Ω—ñ —Ñ–∞–π–ª–∏: " . $files->count() . "\n";
        }

        $keyboard = [
            [
                ['text' => '‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏', 'callback_data' => "task_edit:{$task->id}"],
                ['text' => 'üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏', 'callback_data' => "task_delete:{$task->id}"]
            ],
            [
                ['text' => '‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ', 'callback_data' => "task_status:{$task->id}:completed"],
                ['text' => '‚è≥ –í –ø—Ä–æ—Ü–µ—Å—ñ', 'callback_data' => "task_status:{$task->id}:in_progress"]
            ],
            [
                ['text' => '‚óÄÔ∏è –ù–∞–∑–∞–¥ –¥–æ —Å–ø–∏—Å–∫—É', 'callback_data' => "task_list"]
            ]
        ];

        $this->sendInlineKeyboard($chatId, $message, $keyboard);
    }

    /**
     * Edit a task.
     *
     * @param int|string $chatId
     * @param TelegramUser $user
     * @param int $taskId
     * @return void
     */
    protected function editTask($chatId, TelegramUser $user, $taskId): void
    {
        // This would typically involve a conversation flow
        // For simplicity, we'll just send instructions
        $message = "–©–æ–± —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è, –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n\n";
        $message .= "<code>/edit {$taskId} –ù–∞–∑–≤–∞ –∑–∞–≤–¥–∞–Ω–Ω—è | –û–ø–∏—Å –∑–∞–≤–¥–∞–Ω–Ω—è | –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç | –î–∞—Ç–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è</code>\n\n";
        $message .= "–ù–∞–ø—Ä–∏–∫–ª–∞–¥:\n";
        $message .= "<code>/edit {$taskId} –ö—É–ø–∏—Ç–∏ –º–æ–ª–æ–∫–æ | –ö—É–ø–∏—Ç–∏ 2 –ª—ñ—Ç—Ä–∏ –º–æ–ª–æ–∫–∞ –≤ –º–∞–≥–∞–∑–∏–Ω—ñ | high | 2023-06-15</code>";

        $this->sendMessage($chatId, $message);
    }

    /**
     * Delete a task.
     *
     * @param int|string $chatId
     * @param TelegramUser $user
     * @param int $taskId
     * @return void
     */
    protected function deleteTask($chatId, TelegramUser $user, $taskId): void
    {
        $task = $user->tasks()->find($taskId);

        if (!$task) {
            $this->sendMessage($chatId, "–ó–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ —É –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –Ω—å–æ–≥–æ.");
            return;
        }

        $task->delete();
        $this->sendMessage($chatId, "‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è \"{$task->title}\" –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.");
        
        // Show the task list again
        $this->sendTaskList($chatId, $user);
    }

    /**
     * Update the status of a task.
     *
     * @param int|string $chatId
     * @param TelegramUser $user
     * @param int $taskId
     * @param string $status
     * @return void
     */
    protected function updateTaskStatus($chatId, TelegramUser $user, $taskId, $status): void
    {
        $task = $user->tasks()->find($taskId);

        if (!$task) {
            $this->sendMessage($chatId, "–ó–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ —É –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –Ω—å–æ–≥–æ.");
            return;
        }

        $task->status = $status;
        $task->save();

        $statusText = match($status) {
            'pending' => '–æ—á—ñ–∫—É—î',
            'in_progress' => '–≤ –ø—Ä–æ—Ü–µ—Å—ñ',
            'completed' => '–≤–∏–∫–æ–Ω–∞–Ω–æ',
            'cancelled' => '—Å–∫–∞—Å–æ–≤–∞–Ω–æ',
            default => $status
        };

        $this->sendMessage($chatId, "‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–≤–¥–∞–Ω–Ω—è \"{$task->title}\" –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ \"{$statusText}\".");
        
        // Show the task again
        $this->viewTask($chatId, $user, $taskId);
    }

    /**
     * Save or update a Telegram user.
     *
     * @param array $userData
     * @return TelegramUser
     */
    protected function saveUser(array $userData): TelegramUser
    {
        return TelegramUser::updateOrCreate(
            ['telegram_id' => $userData['id']],
            [
                'username' => $userData['username'] ?? null,
                'first_name' => $userData['first_name'] ?? null,
                'last_name' => $userData['last_name'] ?? null,
                'is_bot' => $userData['is_bot'] ?? false,
                'language_code' => $userData['language_code'] ?? null,
            ]
        );
    }

    /**
     * Save or update a Telegram group and add the user as a member.
     *
     * @param array $chatData
     * @param TelegramUser $user
     * @return TelegramGroup
     */
    protected function saveGroup(array $chatData, TelegramUser $user): TelegramGroup
    {
        $group = TelegramGroup::updateOrCreate(
            ['telegram_chat_id' => $chatData['id']],
            [
                'title' => $chatData['title'] ?? 'Group',
                'type' => $chatData['type'],
                'is_active' => true,
            ]
        );

        // Add user to group if not already a member
        if (!$group->members()->where('telegram_user_id', $user->id)->exists()) {
            $group->members()->attach($user->id, ['is_admin' => false]);
        }

        return $group;
    }

    /**
     * Get emoji for task status.
     *
     * @param string $status
     * @return string
     */
    protected function getStatusEmoji(string $status): string
    {
        return match($status) {
            'pending' => '‚è≥',
            'in_progress' => 'üîÑ',
            'completed' => '‚úÖ',
            'cancelled' => '‚ùå',
            default => '‚ùì'
        };
    }

    /**
     * Get emoji for task priority.
     *
     * @param string $priority
     * @return string
     */
    protected function getPriorityEmoji(string $priority): string
    {
        return match($priority) {
            'low' => 'üü¢',
            'medium' => 'üü°',
            'high' => 'üü†',
            'urgent' => 'üî¥',
            default => '‚ö™'
        };
    }
}
